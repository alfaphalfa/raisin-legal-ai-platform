'use client'

import { useState } from 'react'
import { motion, AnimatePresence } from 'framer-motion'
import {
  AlertTriangle,
  Bell,
  Download,
  Filter,
  Globe,
  Shield,
  TrendingUp,
  Calendar,
  FileText,
  ChevronDown,
  X,
  ArrowLeft
} from 'lucide-react'
import Link from 'next/link'
import ReactMarkdown from 'react-markdown'
import { JurisdictionBadge } from '@/components/shared/JurisdictionBadge'
import { mockAlerts, mockJurisdictions } from '@/lib/mock-data'
import { COMPLIANCE_FRAMEWORKS } from '@/lib/raisin-constants'
import { formatDate, cn } from '@/lib/utils'

export default function ComplianceRadarPage() {
  const [selectedJurisdictions, setSelectedJurisdictions] = useState<string[]>([])
  const [selectedFrameworks, setSelectedFrameworks] = useState<string[]>([])
  const [selectedSeverity, setSelectedSeverity] = useState<string | null>(null)
  const [selectedAlert, setSelectedAlert] = useState<typeof mockAlerts[0] | null>(null)

  const toggleJurisdiction = (code: string) => {
    setSelectedJurisdictions(prev =>
      prev.includes(code) ? prev.filter(c => c !== code) : [...prev, code]
    )
  }

  const toggleFramework = (framework: string) => {
    setSelectedFrameworks(prev =>
      prev.includes(framework) ? prev.filter(f => f !== framework) : [...prev, framework]
    )
  }

  const filteredAlerts = mockAlerts.filter(alert => {
    if (selectedJurisdictions.length > 0) {
      const hasJurisdiction = alert.jurisdictions.some(j =>
        selectedJurisdictions.includes(j)
      )
      if (!hasJurisdiction) return false
    }

    if (selectedSeverity && alert.severity !== selectedSeverity) {
      return false
    }

    return true
  })

  const generateComplianceBrief = () => {
    return `## Compliance Brief - ${new Date().toLocaleDateString()}

### Executive Summary
This automated compliance brief covers recent regulatory changes affecting your operations across ${selectedJurisdictions.length || mockJurisdictions.length} jurisdictions.

### Key Regulatory Updates
${filteredAlerts.map(alert => `
#### ${alert.title}
- **Severity**: ${alert.severity.toUpperCase()}
- **Jurisdictions**: ${alert.jurisdictions.join(', ')}
- **Impact**: ${alert.impact}
- **Description**: ${alert.description}
`).join('')}

### Recommended Actions
1. Review and update internal compliance procedures
2. Notify affected partner banks
3. Schedule training for compliance teams
4. Update customer-facing documentation

### Next Review Date
${new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toLocaleDateString()}

---
*Generated by Raisin Legal AI Command Center*`
  }

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <header className="bg-white border-b border-gray-200">
        <div className="px-6 py-4">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-4">
              <Link
                href="/dashboard"
                className="p-2 hover:bg-gray-100 rounded-lg transition-colors"
              >
                <ArrowLeft className="w-5 h-5" />
              </Link>
              <h1 className="text-xl font-semibold">Compliance Radar</h1>
            </div>

            <div className="flex items-center gap-3">
              <button className="flex items-center gap-2 px-4 py-2 bg-primary text-white rounded-lg hover:bg-indigo-700 transition-colors">
                <Download className="w-4 h-4" />
                Export Brief
              </button>
            </div>
          </div>
        </div>
      </header>

      <div className="p-6">
        <div className="grid lg:grid-cols-3 gap-6">
          {/* Filters Panel */}
          <div className="lg:col-span-1">
            <motion.div
              initial={{ opacity: 0, x: -20 }}
              animate={{ opacity: 1, x: 0 }}
              className="bg-white rounded-xl shadow-sm border border-gray-200 p-6"
            >
              <h2 className="text-lg font-semibold mb-4 flex items-center gap-2">
                <Filter className="w-5 h-5 text-primary" />
                Filters
              </h2>

              {/* Jurisdiction Filter */}
              <div className="mb-6">
                <h3 className="text-sm font-medium text-gray-700 mb-3">Jurisdictions</h3>
                <div className="space-y-2">
                  {mockJurisdictions.map(jurisdiction => (
                    <button
                      key={jurisdiction.code}
                      onClick={() => toggleJurisdiction(jurisdiction.code)}
                      className={cn(
                        "w-full flex items-center justify-between p-2 rounded-lg border transition-all",
                        selectedJurisdictions.includes(jurisdiction.code)
                          ? "border-primary bg-primary/10"
                          : "border-gray-200 hover:border-gray-300"
                      )}
                    >
                      <div className="flex items-center gap-2">
                        <JurisdictionBadge
                          code={jurisdiction.code}
                          name={jurisdiction.name}
                          size="sm"
                          className="bg-transparent px-0"
                        />
                      </div>
                      <span className={cn(
                        "text-xs px-2 py-1 rounded",
                        jurisdiction.risk === 'high' ? 'bg-red-100 text-red-700' :
                        jurisdiction.risk === 'medium' ? 'bg-amber-100 text-amber-700' :
                        'bg-green-100 text-green-700'
                      )}>
                        {jurisdiction.risk}
                      </span>
                    </button>
                  ))}
                </div>
              </div>

              {/* Severity Filter */}
              <div className="mb-6">
                <h3 className="text-sm font-medium text-gray-700 mb-3">Severity</h3>
                <div className="space-y-2">
                  {['high', 'medium', 'low'].map(severity => (
                    <button
                      key={severity}
                      onClick={() => setSelectedSeverity(
                        selectedSeverity === severity ? null : severity
                      )}
                      className={cn(
                        "w-full p-2 rounded-lg border transition-all text-left",
                        selectedSeverity === severity
                          ? "border-primary bg-primary/10"
                          : "border-gray-200 hover:border-gray-300"
                      )}
                    >
                      <span className="capitalize">{severity} Priority</span>
                    </button>
                  ))}
                </div>
              </div>

              {/* Framework Filter */}
              <div>
                <h3 className="text-sm font-medium text-gray-700 mb-3">Frameworks</h3>
                <div className="space-y-2 max-h-48 overflow-y-auto">
                  {COMPLIANCE_FRAMEWORKS.map(framework => (
                    <button
                      key={framework}
                      onClick={() => toggleFramework(framework)}
                      className={cn(
                        "w-full p-2 rounded-lg border transition-all text-left text-sm",
                        selectedFrameworks.includes(framework)
                          ? "border-primary bg-primary/10"
                          : "border-gray-200 hover:border-gray-300"
                      )}
                    >
                      {framework}
                    </button>
                  ))}
                </div>
              </div>
            </motion.div>
          </div>

          {/* Alerts Feed */}
          <div className="lg:col-span-2">
            <motion.div
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              className="bg-white rounded-xl shadow-sm border border-gray-200 p-6"
            >
              <div className="flex items-center justify-between mb-6">
                <h2 className="text-lg font-semibold flex items-center gap-2">
                  <Bell className="w-5 h-5 text-primary" />
                  Regulatory Alerts
                </h2>
                <span className="text-sm text-gray-500">
                  {filteredAlerts.length} active alerts
                </span>
              </div>

              <div className="space-y-4">
                {filteredAlerts.map((alert) => (
                  <motion.div
                    key={alert.id}
                    initial={{ opacity: 0, y: 10 }}
                    animate={{ opacity: 1, y: 0 }}
                    className="border border-gray-200 rounded-lg p-4 hover:border-primary/50 transition-all cursor-pointer"
                    onClick={() => setSelectedAlert(alert)}
                  >
                    <div className="flex items-start justify-between mb-3">
                      <div className="flex items-start gap-3">
                        <div className={cn(
                          "p-2 rounded-lg",
                          alert.severity === 'high' ? 'bg-red-100' :
                          alert.severity === 'medium' ? 'bg-amber-100' :
                          'bg-gray-100'
                        )}>
                          <AlertTriangle className={cn(
                            "w-5 h-5",
                            alert.severity === 'high' ? 'text-red-600' :
                            alert.severity === 'medium' ? 'text-amber-600' :
                            'text-gray-600'
                          )} />
                        </div>
                        <div>
                          <h3 className="font-semibold text-gray-900">{alert.title}</h3>
                          <p className="text-sm text-gray-600 mt-1">{alert.description}</p>
                        </div>
                      </div>
                      <span className={cn(
                        "text-xs px-2 py-1 rounded font-medium",
                        alert.severity === 'high' ? 'bg-red-100 text-red-700' :
                        alert.severity === 'medium' ? 'bg-amber-100 text-amber-700' :
                        'bg-gray-100 text-gray-700'
                      )}>
                        {alert.severity.toUpperCase()}
                      </span>
                    </div>

                    <div className="flex items-center gap-4">
                      <div className="flex items-center gap-2">
                        <Globe className="w-4 h-4 text-gray-400" />
                        <div className="flex gap-1">
                          {alert.jurisdictions.map(code => (
                            <JurisdictionBadge
                              key={code}
                              code={code}
                              size="sm"
                              showName={false}
                              className="bg-gray-100 px-2 py-0.5"
                            />
                          ))}
                        </div>
                      </div>
                      <div className="flex items-center gap-1 text-gray-500">
                        <Shield className="w-4 h-4" />
                        <span className="text-xs">{alert.impact}</span>
                      </div>
                      <div className="flex items-center gap-1 text-gray-400 ml-auto">
                        <Calendar className="w-4 h-4" />
                        <span className="text-xs">{formatDate(alert.timestamp)}</span>
                      </div>
                    </div>
                  </motion.div>
                ))}
              </div>

              {/* Impact Assessment Matrix */}
              <div className="mt-8 p-6 bg-gradient-to-r from-gray-50 to-gray-100 rounded-lg">
                <h3 className="text-lg font-semibold mb-4 flex items-center gap-2">
                  <TrendingUp className="w-5 h-5 text-primary" />
                  Impact Assessment Matrix
                </h3>
                <div className="grid grid-cols-3 gap-4">
                  <div className="bg-white p-4 rounded-lg border border-gray-200">
                    <h4 className="text-sm font-medium text-gray-700 mb-2">High Impact</h4>
                    <div className="text-2xl font-bold text-red-600">
                      {filteredAlerts.filter(a => a.severity === 'high').length}
                    </div>
                    <p className="text-xs text-gray-500 mt-1">Immediate action required</p>
                  </div>
                  <div className="bg-white p-4 rounded-lg border border-gray-200">
                    <h4 className="text-sm font-medium text-gray-700 mb-2">Medium Impact</h4>
                    <div className="text-2xl font-bold text-amber-600">
                      {filteredAlerts.filter(a => a.severity === 'medium').length}
                    </div>
                    <p className="text-xs text-gray-500 mt-1">Review within 7 days</p>
                  </div>
                  <div className="bg-white p-4 rounded-lg border border-gray-200">
                    <h4 className="text-sm font-medium text-gray-700 mb-2">Low Impact</h4>
                    <div className="text-2xl font-bold text-green-600">
                      {filteredAlerts.filter(a => a.severity === 'low').length}
                    </div>
                    <p className="text-xs text-gray-500 mt-1">Monitor and track</p>
                  </div>
                </div>
              </div>

              {/* Auto-generated Brief */}
              <div className="mt-8 p-6 bg-indigo-50 rounded-lg border border-indigo-200">
                <h3 className="text-lg font-semibold mb-4 flex items-center gap-2">
                  <FileText className="w-5 h-5 text-indigo-600" />
                  Auto-Generated Compliance Brief
                </h3>
                <div className="prose prose-sm max-w-none">
                  <ReactMarkdown>{generateComplianceBrief()}</ReactMarkdown>
                </div>
              </div>
            </motion.div>
          </div>
        </div>
      </div>

      {/* Alert Detail Modal */}
      <AnimatePresence>
        {selectedAlert && (
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            className="fixed inset-0 bg-black/50 z-50 flex items-center justify-center p-4"
            onClick={() => setSelectedAlert(null)}
          >
            <motion.div
              initial={{ scale: 0.9 }}
              animate={{ scale: 1 }}
              exit={{ scale: 0.9 }}
              className="bg-white rounded-xl max-w-2xl w-full max-h-[80vh] overflow-y-auto p-6"
              onClick={(e) => e.stopPropagation()}
            >
              <div className="flex items-center justify-between mb-4">
                <h2 className="text-xl font-semibold">{selectedAlert.title}</h2>
                <button
                  onClick={() => setSelectedAlert(null)}
                  className="p-2 hover:bg-gray-100 rounded-lg transition-colors"
                >
                  <X className="w-5 h-5" />
                </button>
              </div>

              <div className="space-y-4">
                <div>
                  <h3 className="text-sm font-medium text-gray-700 mb-2">Description</h3>
                  <p className="text-gray-600">{selectedAlert.description}</p>
                </div>

                <div>
                  <h3 className="text-sm font-medium text-gray-700 mb-2">Affected Markets</h3>
                  <div className="flex gap-2">
                    {selectedAlert.jurisdictions.map(code => {
                      const jurisdiction = mockJurisdictions.find(j => j.code === code)
                      return (
                        <JurisdictionBadge
                          key={code}
                          code={code}
                          name={jurisdiction?.name}
                        />
                      )
                    })}
                  </div>
                </div>

                <div>
                  <h3 className="text-sm font-medium text-gray-700 mb-2">Impact Analysis</h3>
                  <p className="text-gray-600">{selectedAlert.impact}</p>
                </div>

                <div>
                  <h3 className="text-sm font-medium text-gray-700 mb-2">Recommended Actions</h3>
                  <ul className="list-disc list-inside text-gray-600 space-y-1">
                    <li>Review affected contracts and agreements</li>
                    <li>Update compliance documentation</li>
                    <li>Notify relevant stakeholders</li>
                    <li>Schedule compliance team briefing</li>
                  </ul>
                </div>

                <div className="flex gap-3 pt-4 border-t">
                  <button className="flex-1 px-4 py-2 bg-primary text-white rounded-lg hover:bg-indigo-700 transition-colors">
                    Create Action Plan
                  </button>
                  <button className="flex-1 px-4 py-2 bg-gray-100 text-gray-700 rounded-lg hover:bg-gray-200 transition-colors">
                    Export Details
                  </button>
                </div>
              </div>
            </motion.div>
          </motion.div>
        )}
      </AnimatePresence>
    </div>
  )
}